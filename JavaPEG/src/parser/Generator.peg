out = "src/parser/Generator_NEW.java";
package = "parser";
class = "Generator_NEW" "GeneratorHelper";
:	public static void main(String[] args) throws Exception {
:		new Generator_NEW($filechooser(".", "Grammar file", "peg")).$main();
:	}

<> -- // Spacing or comment, not empty
	( [ \t\r\n]
	/ "//" ( !"\n" . )*
	) [ \t\r\n]* ~--?

<String> ID // Symbol identifier
: String image;
	image = < [A-Za-z_-] [$0-9A-Za-z_-]* >
: return image.replace('-', '_');

<String> PARAM // Parameter
: String image;
	image = < "(" ( ~PARAM / !")" . )* ")" >
: return image;

<int> STRING // String literal, returns length
: int length = 0;
	"\""
	( "\\"
		( "u"+ ....
		/ [0-3]? [0-7] [0-7]?
		/ .
		) : ++length;
	/ !"\"" . : ++length;
	)* "\""
: return length;

<String> CHAR // Character class literal, same as Java regular expression
: String image;
	image = < "[" ( "\\" ( "\\[" / "\\]" / . ) / ~CHAR / !"]" . )* "]" >
: return image;

<void> --elem // Grammar elements with modifiers
	~--
/
: String value = "", id, param = "()";
: String[] pos;
	id = ID
	( ~--? "=" ~--? : pos = symbol.image();
		"<" --elem* ">" : symbol.image(id, pos);
	/
		( : value = id + " = ";
			~--? "=" ~--? id = ID
		)? param = PARAM? ~--?
		( "?" : symbol.id_option(value, id, param);
		/ "*" : symbol.id_more(value, id, param);
		/ "+"
			: symbol.id(value, id, param);
			: symbol.id_more(value, id, param);
		/ : symbol.id(value, id, param);
		)
	)
/
: String id;
	"~" ~--? id = ID ~--?
	( "?" : symbol.pred_option(id + "$()", '~' + id);
	/ "*" : symbol.pred_more(id + "$()", '~' + id);
	/ "+"
		: symbol.pred(id + "$()", id + "$()", '~' + id);
		: symbol.pred_more(id + "$()", '~' + id);
	/ : symbol.pred(id + "$()", id + "$()", '~' + id);
	)
/
	"." ~--?
	( "?" : symbol.pred_option("$any()", ".");
	/ "*" : symbol.pred_more("$any()", ".");
	/ "+"
		: symbol.pred("$any()", "++$pos", ".");
		: symbol.pred_more("$any()", ".");
	/ : symbol.pred("$any()", "++$pos", ".");
	)
/
: String image, imagei, f = "$string(";
: int length;
	imagei = <
		image = < length = STRING >
		( "i"
			: f = "$stringi(";
			: image = image.toLowerCase();
		)?
	> ~--?
	( "?" : symbol.pred_option(f + image + ')', imagei);
	/ "*" : symbol.pred_more(f + image + ')', imagei);
	/ "+"
		: symbol.pred(f + image + ')', "$pos += " + length, imagei);
		: symbol.pred_more(f + image + ')', imagei);
	/ : symbol.pred(f + image + ')', "$pos += " + length, imagei);
	)
/
: String image;
	image = CHAR ~--?
	( "?" : symbol.pred_option(pred_char(image), image);
	/ "*" : symbol.pred_more(pred_char(image), image);
	/ "+"
		: symbol.pred(pred_char(image), "++$pos", image);
		: symbol.pred_more(pred_char(image), image);
	/ : symbol.pred(pred_char(image), "++$pos", image);
	)
/
: String image;
	"&" ~--?
	( image = ID : symbol.pred_and(image + "$()", image);
	/ "." : symbol.pred_and("$any()", ".");
	/ : String imagei, f = "$string(";
		imagei = <
			image = < ~STRING >
			( "i"
				: f = "$stringi(";
				: image = image.toLowerCase();
			)?
		> : symbol.pred_and(f + image + ')', imagei);
	/ image = CHAR : symbol.pred_and(pred_char(image), image);
	/ : symbol.par();
		"(" -par- ")" : symbol.par_and();
	)
/
: String image;
	"!" ~--?
	( image = ID : symbol.pred_not(image + "$()", image);
	/ "." : symbol.pred_not("$any()", ".");
	/ : String imagei, f = "$string(";
		imagei = <
			image = < ~STRING >
			( "i"
				: f = "$stringi(";
				: image = image.toLowerCase();
			)?
		> : symbol.pred_not(f + image + ')', imagei);
	/ image = CHAR : symbol.pred_not(pred_char(image), image);
	/ : symbol.par();
		"(" -par- ")" : symbol.par_not();
	)
/
: symbol.par();
	"(" -par- ")" ~--?
	( "?" : symbol.par_option();
	/ "*" : symbol.par_more();
	/ "+" : symbol.par_plus();
	/ : symbol.par_end();
	)
/
: String code;
	":" ( " " / "\t" )? code = < ( !"\n" . )* > : symbol.code(code);

<void> -par- // Elements and ordered choices inside parentheses or symbol definition
	( --elem
	/ "/" : symbol.choice();
	)*

<> Type // Java type expression
	~TypeArguments ( ~--? "[" ~--? "]" )*

<> TypeArguments
	~ID ( ~--? "<" ~-TypeArgument- ">" )? ( ~--? "." ~--? ~TypeArguments )?

<> -TypeArgument-
	~--?
	( "?" ~--? ( ( "extends" / "super" ) ~-- ~Type )?
	/ ~Type
	) ~--? ( "," ~-TypeArgument- )?

<void> $main // Main symbol consists of header commands and symbol definitions
: String command, arg, code;
	( ~--
	/ command = ID ~--? "="
		( ~--
		/ "\"" arg = < ( !"\"" . )* > "\"" : arg_string(arg);
		/ arg = < "-"? [0-9]+ > : arg_int(arg);
		)* ";" : call(command);
	/ ":" ( " " / "\t" )? code = < ( !"\n" . )* > : code(code);
	)*
: String type, id, param;
	( "<" ~--? type = < ~Type? > ~--? ">" ~--? id = < [$A-Za-z_-] [$0-9A-Za-z_-]* > : param = "()";
		param = PARAM? : symbol = new Symbol(type, id.replace('-', '_'), param);
		-par- : symbol.main();
	)* !.
: end();
