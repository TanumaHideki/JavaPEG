options{	JDK_VERSION = "1.5";	static = false;}PARSER_BEGIN(LL1Generator)package parser.bootstrap;public class LL1Generator extends parser.GeneratorHelper{	public static void main(String args []) throws Exception	{		new LL1Generator(new java.io.FileReader($filechooser(".", "Grammar file", "peg"))).main();	}	public void $open(Object in, int line)	{}	static int length(String string)	{		int l = - 1;		for (int i = 1; i < string.length(); ++l)		{			if (string.charAt(i++) == '\\') ++i;		}		return l;	}}PARSER_END(LL1Generator)SKIP :{	" "|	"\r"|	"\t"|	"\n"|	< "//" (~[ "\n" ])* >|	< "/*"		(			~[ "*" ]		|	("*")+ ~[ "/" ]		)*		(			("*")+ "/"		)? >}TOKEN :{	< ID : [ "$", "A"-"Z", "a"-"z", "_", "-" ] ([ "$", "0"-"9", "A"-"Z", "a"-"z", "_", "-" ])* >|	< TYPE : "<" (< ID >)? ">" >|	< STRING :		(			"\""			(				~[ "\"", "\\" ]			|	"\\" ~[ ]			)*			"\""		) >|	< CHAR : "[" (~[ "]" ])* ("]")+ >|	< CODE : ":" (~[ "\n" ])* >}void elem() :{	Token t1, t2;	String [ ] pos;}{	t1 = < ID >	(		"="		(			"<"			{				pos = symbol.image();			}			(				elem()			)*			">"			{				symbol.image(t1.image, pos);			}		|	t2 = < ID >			(				"?"				{					symbol.id_option(t1.image + " = ", t2.image.replace('-', '_'), "()");				}			|	"*"				{					symbol.id_more(t1.image + " = ", t2.image.replace('-', '_'), "()");				}			|	"+"				{					symbol.id(t1.image + " = ", t2.image.replace('-', '_'), "()");					symbol.id_more(t1.image + " = ", t2.image.replace('-', '_'), "()");				}			|				{					symbol.id(t1.image + " = ", t2.image.replace('-', '_'), "()");				}			)		)	|	"?"		{			symbol.id_option("", t1.image.replace('-', '_'), "()");		}	|	"*"		{			symbol.id_more("", t1.image.replace('-', '_'), "()");		}	|	"+"		{			symbol.id("", t1.image.replace('-', '_'), "()");			symbol.id_more("", t1.image.replace('-', '_'), "()");		}	|		{			symbol.id("", t1.image.replace('-', '_'), "()");		}	)|	"~" t1 = < ID >	(		"?"		{			symbol.pred_option(t1.image.replace('-', '_') + "$()", '~' + t1.image.replace('-', '_'));		}	|	"*"		{			symbol.pred_more(t1.image.replace('-', '_') + "$()", '~' + t1.image.replace('-', '_'));		}	|	"+"		{			symbol.pred(t1.image.replace('-', '_') + "$()", t1.image.replace('-', '_') + "$()", '~' + t1.image.replace('-', '_'));			symbol.pred_more(t1.image.replace('-', '_') + "$()", '~' + t1.image.replace('-', '_'));		}	|		{			symbol.pred(t1.image.replace('-', '_') + "$()", t1.image.replace('-', '_') + "$()", '~' + t1.image.replace('-', '_'));		}	)|	"."	(		"?"		{			symbol.pred_option("$any()", ".");		}	|	"*"		{			symbol.pred_more("$any()", ".");		}	|	"+"		{			symbol.pred("$any()", "++$pos", ".");			symbol.pred_more("$any()", ".");		}	|		{			symbol.pred("$any()", "++$pos", ".");		}	)|	t1 = < STRING >	(		"?"		{			symbol.pred_option("$string(" + t1.image + ')', t1.image);		}	|	"*"		{			symbol.pred_more("$string(" + t1.image + ')', t1.image);		}	|	"+"		{			symbol.pred("$string(" + t1.image + ')', "$pos += " + length(t1.image), t1.image);			symbol.pred_more("$string(" + t1.image + ')', t1.image);		}	|		{			symbol.pred("$string(" + t1.image + ')', "$pos += " + length(t1.image), t1.image);		}	)|	t1 = < CHAR >	(		"?"		{			symbol.pred_option(pred_char(t1.image), t1.image);		}	|	"*"		{			symbol.pred_more(pred_char(t1.image), t1.image);		}	|	"+"		{			symbol.pred(pred_char(t1.image), "++$pos", t1.image);			symbol.pred_more(pred_char(t1.image), t1.image);		}	|		{			symbol.pred(pred_char(t1.image), "++$pos", t1.image);		}	)|	"&"	(		t1 = < ID >		{			symbol.pred_and(t1.image.replace('-', '_') + "$()", t1.image.replace('-', '_'));		}	|	"."		{			symbol.pred_and("$any()", ".");		}	|	t1 = < STRING >		{			symbol.pred_and("$string(" + t1.image + ')', t1.image);		}	|	t1 = < CHAR >		{			symbol.pred_and(pred_char(t1.image), t1.image);		}	|	"("		{			symbol.par();		}		par() ")"		{			symbol.par_and();		}	)|	"!"	(		t1 = < ID >		{			symbol.pred_not(t1.image.replace('-', '_') + "$()", t1.image.replace('-', '_'));		}	|	"."		{			symbol.pred_not("$any()", ".");		}	|	t1 = < STRING >		{			symbol.pred_not("$string(" + t1.image + ')', t1.image);		}	|	t1 = < CHAR >		{			symbol.pred_not(pred_char(t1.image), t1.image);		}	|	"("		{			symbol.par();		}		par() ")"		{			symbol.par_not();		}	)|	"("	{		symbol.par();	}	par() ")"	(		"?"		{			symbol.par_option();		}	|	"*"		{			symbol.par_more();		}	|	"+"		{			symbol.par_plus();		}	|		{			symbol.par_end();		}	)|	t1 = < CODE >	{		symbol.code(t1.image.substring(2));	}}void par() :{}{	(		elem()	|	"/"		{			symbol.choice();		}	)*}void main() :{	Token t1, t2;}{	(		t1 = < ID > "="		(			t2 = < STRING >			{				arg_string(t2.image.substring(1, t2.image.length() - 1));			}		)*		";"		{			call(t1.image);		}	|	t1 = < CODE >		{			code(t1.image.substring(2));		}	)*	(		t1 = < TYPE > t2 = < ID >		{			symbol = new Symbol(t1.image.substring(1, t1.image.length() - 1).trim(), t2.image.replace('-', '_'), "()");		}		par()		{			symbol.main();		}	)*	< EOF >	{		end();	}}